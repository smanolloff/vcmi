############## Setup guide for Ubuntu 22.04 with apt (ie. precompiled boost & qt instead of compiling via conan)

0. Checkout vcmi-gym (with vcmi as a submodule)

        $ git clone --recurse-submodules https://github.com/smanolloff/vcmi-gym.git
        $ export VCMI_GYM_DIR="$PWD/vcmi-gym"

1. VCMI

        $ cd "$VCMI_GYM_DIR/envs/v0/vcmi"
        $ sudo apt-get install cmake g++ libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev \
            libsdl2-mixer-dev zlib1g-dev libavformat-dev libswscale-dev libboost-dev \
            libboost-filesystem-dev libboost-system-dev libboost-thread-dev libboost-program-options-dev \
            libboost-locale-dev qtbase5-dev libtbb-dev libluajit-5.1-dev qttools5-dev

        # NOTE: the `-D CMAKE_TOOLCHAIN_FILE` option is removed (we are not using conan here)
        # NOTE: the `--fresh` option is removed (apparently unavailable on cmake v3.22.1)
        # NOTE: a potential error with missing FuzzyLite dir is solved with `git submodule update --init --recursive`

        $ cmake -S . -B build -Wno-dev \
            -D CMAKE_BUILD_TYPE=Debug \
            -D ENABLE_SINGLE_APP_BUILD=1 \
            -D ENABLE_CCACHE=1 \
            -D ENABLE_NULLKILLER_AI=0 \
            -D ENABLE_LAUNCHER=0 \
            -D ENABLE_MYCLIENT_BUILD=1 \
            -D ENABLE_DEV_BUILD=1 \
            -D CMAKE_EXPORT_COMPILE_COMMANDS=1

        $ cmake --build build/

        # NOTE: The two commands below are optional:
        # Run them only if you want to compile a "release" binary
        # (optimized for faster execution but does not allow any debugging)

        $ cmake -S . -B rel -Wno-dev \
            -D CMAKE_BUILD_TYPE=Release \
            -D ENABLE_SINGLE_APP_BUILD=1 \
            -D ENABLE_CCACHE=1 \
            -D ENABLE_NULLKILLER_AI=0 \
            -D ENABLE_LAUNCHER=0 \
            -D ENABLE_MYCLIENT_BUILD=1 \
            -D ENABLE_DEV_BUILD=0 \
            -D CMAKE_EXPORT_COMPILE_COMMANDS=0

        $ cmake --build rel/


2. HOMM3 data files

    # NOTE: HOMM3 data files are not included in VCMI
    # You will need an existing HOMM3 instllation to perform this step
    # Follow "Step 2: Installing Heroes III data files" from the official VCMI docs:
    # https://github.com/vcmi/vcmi/blob/1.3.2/docs/players/Installation_Linux.md#install-data-using-vcmibuilder-script
    #
    # The instructions below assume the following directory structure (relative to $VCMI_GYM_DIR):
    #
    #       $ tree -dL 2 game
    #       game
    #       └── h3
    #           ├── Data
    #           ├── EULA
    #           ├── Games
    #           ├── Maps
    #           ├── Mp3
    #           └── ...

3. Local configs
    # NOTE: VCMI normally creates those startup, but the it has been patched to prevent disk writes
    # (hence configs need to be copied manually before the first run)

        $ ln -st "$HOME/.config/vcmi" "$VCMI_GYM_DIR/vcmi_gym/envs/v0/vcmi/_notes/{settings,modSettings}.json"

4. Test installation

        $ cd "$VCMI_GYM_DIR/envs/v0/vcmi"

        #
        # Start a new game on the specified map (with GUI)
        #

        $ build/bin/myclient-gui --gymdir "VCMI_GYM_DIR" --map ai/P1.vmap

        #
        # Benchmark performance (no GUI)
        # This will automatically start a battle where the attacker is an RNG AI
        # Whenever the battle ends, it is immediately restarted and "played" again
        # The performance will be measured and the output should look something like this:
        #
        #       Benchmark:
        #       * Map: ai/generated/B001.vmap
        #       * Attacker AI: MMAI_USER
        #       * Defender AI: StupidAI
        #
        #       -  steps/s: 16     resets/s: 0.75
        #       -  steps/s: 17     resets/s: 0.74
        #       -  ...etc.

        $ build/bin/myclient-headless --gymdir ~/Projects/vcmi-gym --map ai/generated/B001.vmap --loglevel-ai error --benchmark

        #
        # NOTE: the same command can be used with the the "release" binary (if compiled) to compare the performance
        # (typically ~10 times faster)
        #
