@startuml "vcmi-1.32-connector-v2-render"

title "VCMI-1.3.2 connector-v2 render"

skinparam sequenceBoxBorderColor #FFF

!$nbsp = "<U+00A0>"

' workaround the fact that text alignment can only be
' set globally. Using hspace(n) returns N monospaced
' $nbsp chars
!function $hspace($length)
  !$res = ""
  !$i = $length
  !while $i > 0
    !$res = $res + $nbsp
    !$i = $i - 1
  !endwhile
  !return "<font:monospaced>"+$res+"</font>"
!endfunction

!function $desc($txt)
  !return "<font:Arial><color:Gray><i>// "+$txt+"</i></color></font>"
!endfunction

!function $notify($lock_id)
  !return "<color:blue>cond"+$lock_id+".notify</color>"
!endfunction

!function $wait($lock_id, $set)
  !if ($set == 0)
    !return "<back:red>cond"+$lock_id+".wait</back>\n"+$lock_rel($lock_id)
  !endif

  !return "<color:yellow><back:blue>cond"+$lock_id+".wait</back></color>\n"+$lock_acq($lock_id,1)
!endfunction

!function $lock_rel($id)
  !return "<color:yellow><back:black>release lock #"+$id+"</back></color>"
!endfunction

!function $lock_acq($id, $success)
  !if ($success == 1)
    !return "<back:yellow>acquire lock #"+$id+"</back>"
  !else
    !return "<back:yellow><color:red>acquire lock #"+$id+"</color></back>"
  !endif
!endfunction

!function $sharevar($name)
  !return "<color:gray>"+$name+"</color>"
!endfunction

box T1
participant "//Env//" as env
participant "//pyconnector//" as py
participant "//cppconnector//\n$desc(T1)" as cpp1
end box

box T2
participant "//cppconnector//\n$desc(T2)" as cpp2
participant "//AAI//" as aai
participant "//BAI//" as bai
participant "//VCMI Client//" as vcmiclient
end box

activate cpp1
activate py
activate env

vcmiclient o-> bai ++ : activeStack
bai -> aai ++ : getAction(Result)
aai -> cpp2 ++ : F_GetAction(Result)\n$desc("from cbprovider")
cpp2 <--> cpp1 :
cpp1 -> cpp1 : $lock_acq(2,0)
cpp2 -> cpp2 : $wait(2,0)
cpp1 -> cpp1 : $lock_acq(2,1)
cpp1 --> py -- : $lock_rel(2)\n<<P_InitResult>>
py --> env -- : <<obs>>
[<-- env -- : obs

== render start ==

[-> env ++ : render
env -> py ++ : render
py -> cpp1 ++ : render
cpp1 -> cpp1 : $lock_acq(1,1)
cpp1 <--> cpp2 : $sharevar(Action)
cpp1 -> cpp1 : $notify()
cpp2 -> cpp2 : $wait(2,1)
cpp2 --> aai -- : $lock_rel(2)\n<<Action>>\n$desc("render")
cpp1 -> cpp1 : $wait(1,0)
aai --> bai ++ : bai.render()
note right: same thread\nrecursive call
bai --> aai -- : <<string>>
aai -> cpp2 ++ : F_GetAction(Result)\n$desc("render data")
cpp2 -> cpp2 : $lock_acq(1,1)
cpp2 <--[#gray]> cpp1 : $sharevar(P_Result)
cpp2 -> cpp2 : $notify()
cpp2 -> cpp2 : $lock_acq(2,1)
cpp2 -> cpp2 : $lock_rel(1)
cpp1 -> cpp1 : $wait(1,1)
cpp1 -> cpp1 : $lock_acq(2,0)
cpp2 -> cpp2 : $wait(2,0)
cpp1 -> cpp1 : $lock_acq(2,1)
cpp1 --> py -- : $lock_rel(1)\n$lock_rel(2)\n<<P_result>>
py --> env -- : <<string>>
[<-- env -- : string

== render end ==

@enduml
