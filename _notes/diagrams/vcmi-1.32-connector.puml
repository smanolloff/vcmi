@startuml "vcmi-1.32-reset-endbattle"

title "VCMI-1.3.2 connector reset (end-of-battle)"
title "VCMI-1.3.2 connector reset (end-of-battle) WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW"

skinparam sequenceBoxBorderColor #FFF

!$nbsp = "<U+00A0>"

' workaround the fact that text alignment can only be
' set globally. Using hspace(n) returns N monospaced
' $nbsp chars
!function $hspace($length)
  !$res = ""
  !$i = $length
  !while $i > 0
    !$res = $res + $nbsp
    !$i = $i - 1
  !endwhile
  !return "<font:monospaced>"+$res+"</font>"
!endfunction

!function $desc($txt)
  !return "<font:Arial><color:Gray><i>// "+$txt+"</i></color></font>"
!endfunction

!function $wait($set)
  !if ($set == 0)
    !return "<back:red>cond.wait</back>\n"+$lock(0)
  !endif

  !return "<color:yellow><back:blue>cond.wait</back></color>\n"+$lock(1,1)
!endfunction

!function $notify()
  !return "<color:blue>cond.notify</color>"
!endfunction

!function $lock($obtain)
  !if ($obtain == 1)
    !return "<back:yellow>obtain lock</back>"
  !else
    !return "<color:yellow><back:black>release lock</back></color>"
  !endif
!endfunction

!function $lock($obtain, $success)
  !if ($obtain == 0 || $success == 1)
    !return $lock($obtain)
  !endif
  ' failed to obtain
  !return "<back:yellow><color:red>obtain lock</color></back>"
!endfunction

!function $sharevar($name)
  !return "<color:gray>transform &</color>\n<color:gray>store "+$name+"</color>"
!endfunction

box T1
participant "//Env//" as env
participant "//pyconnector//" as py
participant "//cppconnector//\n$desc(T1)" as cpp1
end box

box T2
participant "//cppconnector//\n$desc(T2)" as cpp2
participant "//VCMI//\n$desc('AAI, BAI, etc')" as vcmi
end box

-> env ++ : <<new>>
env -> py ++ : start
py -> cpp1 ++ : start
cpp1 -> cpp1 : $lock(1,1)
cpp1 --> vcmi ++ : start_vcmi(cbprovider)
' cpp1 -> cpp1 : $notify()\n$desc(noop)
cpp1 -> cpp1 : $wait(0)
vcmi -> cpp2 ++ : *CBCB(*CB)
cpp2 <-[#gray]> cpp1 : $sharevar("*CB")
cpp2 --> vcmi -- :
vcmi -> cpp2 ++ : ResultCB(Result)
cpp2 -> cpp2 : $lock(1,1)
cpp2 <--[#gray]> cpp1 : $sharevar(P_Result)
cpp2 -> cpp2 : $notify()
cpp2 -> cpp2 : $lock(0)
cpp1 -> cpp1 : $wait(1)
cpp2 -> cpp2 : $lock(1,0)
cpp1 --> py -- : $lock(0)\n<<P_result>>
cpp2 -> cpp2 : $lock(1,1)
cpp2 -> cpp2 : $wait(0)
py --> env -- : <<obs>>
[<-- env -- : obs

[-> env ++ : step
env -> py ++ : step
py -> cpp1 ++ : act(P_Action)
cpp1 -> cpp1 : $lock(1,1)
cpp1 <--> cpp2 : $sharevar(Action)
cpp1 -> cpp1 : $wait(0)
cpp2 -> cpp2 : $wait(1)
cpp2 --> vcmi -- : $lock(0)\n<<Action>>
vcmi -> cpp2 ++ : ResultCB(Result)
== etc ==
@enduml
